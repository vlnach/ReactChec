{"ast":null,"code":"var _jsxFileName = \"/Users/vlad/Desktop/3f1c5ee3-ddb9-4b74-9cd2-76b781c996ab/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst N = 8; // размер доски 8x8\n\n// вспомогательные функции\n/** индекс в массиве по координатам */\nconst idx = (r, c) => r * N + c; //\nconst getRowColumnByIndex = i => [Math.floor(i / N), i % N]; // координаты по индексу в массиве\nconst isDarkCell = (r, c) => (r + c) % 2 === 1; // черная клетка = могут стоять шашки, на белой нельзя\n\n// компоненты\n\nfunction Square({\n  value,\n  onSquareClick,\n  dark,\n  selected,\n  hint\n}) {\n  let className = \"square\";\n  if (dark) className += \" square--dark\";\n  if (selected) className += \" square--selected\";\n  if (hint) className += \" square--hint\";\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: className,\n    onClick: onSquareClick,\n    children: value === \"dark\" ? \"●\" : value === \"light\" ? \"○\" : \"\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n\n// вся доска\n_c = Square;\nfunction Board({\n  squares,\n  selected,\n  validMoves,\n  onSelect,\n  onMove\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [...Array(N)].map((_, r) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [...Array(N)].map((_, c) => {\n        const i = idx(r, c); // индекс клетки в массиве\n        return /*#__PURE__*/_jsxDEV(Square, {\n          value: squares[i],\n          dark: isDarkCell(r, c),\n          selected: i === selected,\n          hint: validMoves.has(i),\n          onSquareClick: () => squares[i] ? onSelect(i) // клик по шашке → выбрать\n          : onMove(i) // клик по пустой клетке → ход\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 15\n        }, this);\n      })\n    }, r, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n}\n_c2 = Board;\nexport default function Game() {\n  _s();\n  const [history, setHistory] = useState([initBoard()]);\n  const [selected, setSelected] = useState(null);\n  const currentMove = history.length - 1;\n  const squares = history[currentMove];\n  const darkIsNext = currentMove % 2 === 0;\n  const player = darkIsNext ? \"dark\" : \"light\";\n  const validMoves = canMove(squares, selected, player); // допустимые ходы для выделенной шашки - можем или не можем ходить\n\n  //  клик по своей шашке - выделяем или снимаем выделение\n  function handleSelect(i) {\n    if (squares[i] === player) {\n      setSelected(i);\n    } else {\n      setSelected(null);\n    }\n  }\n  // клик по пустой клетке - если ход возможен, то делаем его\n  function handleMove(i) {\n    if (selected != null && validMoves.has(i)) {\n      const next = squares.slice();\n      next[i] = squares[selected];\n      next[selected] = null;\n      const nextHistory = [...history.slice(0, currentMove + 1), next];\n      setHistory(nextHistory.length - currentMove);\n      setSelected(null);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: [\"Turn: \", player]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        squares: squares,\n        selected: selected,\n        validMoves: validMoves,\n        onSelect: handleSelect,\n        onMove: handleMove\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n// инициализация доски, расстановка шашек\n_s(Game, \"5Wg2B7g5Fq4oeiSP7s3WQi6UglM=\");\n_c3 = Game;\nfunction initBoard() {\n  const board = Array(N * N).fill(null);\n  // расставляем темные шашки\n  for (let r = 0; r < 3; r++) {\n    for (let c = 0; c < N; c++) {\n      if (isDarkCell(r, c)) board[idx(r, c)] = \"dark\";\n    }\n  }\n  // расставляем светлые шашки\n  for (let r = N - 3; r < N; r++) {\n    for (let c = 0; c < N; c++) {\n      if (isDarkCell(r, c)) board[idx(r, c)] = \"light\";\n    }\n  }\n  return board;\n}\n\n/** вычисление допустимых ходов для выделенной шашки */\nfunction canMove(board, selected, player) {\n  if (selected == null || board[selected] !== player) return new Set();\n  const [r, c] = getRowColumnByIndex(selected);\n  const rowDelta = player === \"dark\" ? +1 : -1;\n  const moves = [];\n  for (const dc of [-1, +1]) {\n    const nr = r + rowDelta;\n    const nc = c + dc;\n    if (nr >= 0 && nr < N && nc >= 0 && nc < N) {\n      const to = idx(nr, nc);\n      if (board[to] == null) moves.push(to);\n    }\n  }\n  return new Set(moves);\n}\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","N","idx","r","c","getRowColumnByIndex","i","Math","floor","isDarkCell","Square","value","onSquareClick","dark","selected","hint","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","squares","validMoves","onSelect","onMove","Array","map","_","has","_c2","Game","_s","history","setHistory","initBoard","setSelected","currentMove","length","darkIsNext","player","canMove","handleSelect","handleMove","next","slice","nextHistory","_c3","board","fill","Set","rowDelta","moves","dc","nr","nc","to","push","$RefreshReg$"],"sources":["/Users/vlad/Desktop/3f1c5ee3-ddb9-4b74-9cd2-76b781c996ab/src/App.js"],"sourcesContent":["import { useState } from \"react\";\n\nconst N = 8; // размер доски 8x8\n\n// вспомогательные функции\n/** индекс в массиве по координатам */\nconst idx = (r, c) => r * N + c; //\nconst getRowColumnByIndex = (i) => [Math.floor(i / N), i % N]; // координаты по индексу в массиве\nconst isDarkCell = (r, c) => (r + c) % 2 === 1; // черная клетка = могут стоять шашки, на белой нельзя\n\n// компоненты\n\nfunction Square({ value, onSquareClick, dark, selected, hint }) {\n  let className = \"square\";\n  if (dark) className += \" square--dark\";\n  if (selected) className += \" square--selected\";\n  if (hint) className += \" square--hint\";\n\n  return (\n    <button className={className} onClick={onSquareClick}>\n      {value === \"dark\" ? \"●\" : value === \"light\" ? \"○\" : \"\"}\n    </button>\n  );\n}\n\n// вся доска\nfunction Board({ squares, selected, validMoves, onSelect, onMove }) {\n  return (\n    <>\n      {[...Array(N)].map((_, r) => (\n        <div className=\"board-row\" key={r}>\n          {[...Array(N)].map((_, c) => {\n            const i = idx(r, c); // индекс клетки в массиве\n            return (\n              <Square\n                key={i}\n                value={squares[i]}\n                dark={isDarkCell(r, c)}\n                selected={i === selected}\n                hint={validMoves.has(i)}\n                onSquareClick={\n                  () =>\n                    squares[i]\n                      ? onSelect(i) // клик по шашке → выбрать\n                      : onMove(i) // клик по пустой клетке → ход\n                }\n              />\n            );\n          })}\n        </div>\n      ))}\n    </>\n  );\n}\n\nexport default function Game() {\n  const [history, setHistory] = useState([initBoard()]);\n  const [selected, setSelected] = useState(null);\n\n  const currentMove = history.length - 1;\n  const squares = history[currentMove];\n  const darkIsNext = currentMove % 2 === 0;\n  const player = darkIsNext ? \"dark\" : \"light\";\n\n  const validMoves = canMove(squares, selected, player); // допустимые ходы для выделенной шашки - можем или не можем ходить\n\n  //  клик по своей шашке - выделяем или снимаем выделение\n  function handleSelect(i) {\n    if (squares[i] === player) {\n      setSelected(i);\n    } else {\n      setSelected(null);\n    }\n  }\n  // клик по пустой клетке - если ход возможен, то делаем его\n  function handleMove(i) {\n    if (selected != null && validMoves.has(i)) {\n      const next = squares.slice();\n      next[i] = squares[selected];\n      next[selected] = null;\n      const nextHistory = [...history.slice(0, currentMove + 1), next];\n      setHistory(nextHistory.length - currentMove);\n      setSelected(null);\n    }\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <div className=\"status\">Turn: {player}</div>\n        <Board\n          squares={squares}\n          selected={selected}\n          validMoves={validMoves}\n          onSelect={handleSelect}\n          onMove={handleMove}\n        />\n      </div>\n    </div>\n  );\n}\n\n// инициализация доски, расстановка шашек\nfunction initBoard() {\n  const board = Array(N * N).fill(null);\n  // расставляем темные шашки\n  for (let r = 0; r < 3; r++) {\n    for (let c = 0; c < N; c++) {\n      if (isDarkCell(r, c)) board[idx(r, c)] = \"dark\";\n    }\n  }\n  // расставляем светлые шашки\n  for (let r = N - 3; r < N; r++) {\n    for (let c = 0; c < N; c++) {\n      if (isDarkCell(r, c)) board[idx(r, c)] = \"light\";\n    }\n  }\n  return board;\n}\n\n/** вычисление допустимых ходов для выделенной шашки */\nfunction canMove(board, selected, player) {\n  if (selected == null || board[selected] !== player) return new Set();\n  const [r, c] = getRowColumnByIndex(selected);\n  const rowDelta = player === \"dark\" ? +1 : -1;\n  const moves = [];\n\n  for (const dc of [-1, +1]) {\n    const nr = r + rowDelta;\n    const nc = c + dc;\n    if (nr >= 0 && nr < N && nc >= 0 && nc < N) {\n      const to = idx(nr, nc);\n      if (board[to] == null) moves.push(to);\n    }\n  }\n\n  return new Set(moves);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}