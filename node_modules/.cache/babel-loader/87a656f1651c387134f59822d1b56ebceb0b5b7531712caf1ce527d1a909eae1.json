{"ast":null,"code":"var _jsxFileName = \"/Users/vlad/Desktop/3f1c5ee3-ddb9-4b74-9cd2-76b781c996ab/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BOARD_SIZE = 8; // размер доски 8x8\n\n// вспомогательные функции\n/** индекс в массиве по координатам */\nconst getIndexByRowCol = (row, col) => row * BOARD_SIZE + col;\n\n/** координаты по индексу в массиве */\nconst getRowColByIndex = i => [Math.floor(i / BOARD_SIZE), i % BOARD_SIZE];\n\n/** черная клетка = могут стоять шашки, на белой нельзя */\nconst isDarkCell = (row, col) => (row + col) % 2 === 1;\n\n// компоненты\n\nfunction Square({\n  value,\n  onSquareClick,\n  dark,\n  selected,\n  hint\n}) {\n  let className = \"square\";\n  if (dark) className += \" square--dark\";\n  if (selected) className += \" square--selected\";\n  if (hint) className += \" square--hint\";\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: className,\n    onClick: onSquareClick,\n    children: value === \"dark\" ? \"●\" : value === \"light\" ? \"○\" : \"\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n\n// вся доска\n_c = Square;\nfunction Board({\n  squares,\n  selected,\n  validMoves,\n  onSelect,\n  onMove\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [...Array(BOARD_SIZE)].map((_, row) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [...Array(BOARD_SIZE)].map((_, col) => {\n        const index = getIndexByRowCol(row, col); // индекс клетки в массиве\n        return /*#__PURE__*/_jsxDEV(Square, {\n          value: squares[index],\n          dark: isDarkCell(row, col),\n          selected: index === selected,\n          hint: validMoves.has(index),\n          onSquareClick: () => squares[index] ? onSelect(index) : onMove(index)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 15\n        }, this);\n      })\n    }, row, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n}\n_c2 = Board;\nexport default function Game() {\n  _s();\n  const [history, setHistory] = useState([initBoard()]);\n  const [selected, setSelected] = useState(null);\n  const currentMove = history.length - 1;\n  const squares = history[currentMove];\n  const darkIsNext = currentMove % 2 === 0;\n  const player = darkIsNext ? \"dark\" : \"light\";\n  const validMoves = canMove(squares, selected, player);\n\n  // клик по своей шашке - выделяем или снимаем выделение\n  function handleSelect(i) {\n    if (squares[i] === player) {\n      setSelected(i);\n    } else {\n      setSelected(null);\n    }\n  }\n\n  // клик по пустой клетке - если ход возможен, то делаем его\n  function handleMove(i) {\n    if (selected != null && validMoves.has(i)) {\n      const next = squares.slice();\n      const [row1, col1] = getRowColByIndex(selected);\n      const [row2, col2] = getRowColByIndex(i);\n\n      // если прыжок на 2 клетки → убираем шашку соперника\n      if (Math.abs(row2 - row1) === 2 && Math.abs(col2 - col1) === 2) {\n        const midRow = (row1 + row2) / 2;\n        const midCol = (col1 + col2) / 2;\n        next[getIndexByRowCol(midRow, midCol)] = null;\n      }\n      next[i] = squares[selected];\n      next[selected] = null;\n      const nextHistory = [...history.slice(0, currentMove + 1), next];\n      setHistory(nextHistory);\n      setSelected(null);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: [\"Turn: \", player]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        squares: squares,\n        selected: selected,\n        validMoves: validMoves,\n        onSelect: handleSelect,\n        onMove: handleMove\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n\n// инициализация доски, расстановка шашек\n_s(Game, \"5Wg2B7g5Fq4oeiSP7s3WQi6UglM=\");\n_c3 = Game;\nfunction initBoard() {\n  const board = Array(BOARD_SIZE * BOARD_SIZE).fill(null);\n  // расставляем темные шашки\n  for (let row = 0; row < 3; row++) {\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      if (isDarkCell(row, col)) board[getIndexByRowCol(row, col)] = \"dark\";\n    }\n  }\n  // расставляем светлые шашки\n  for (let row = BOARD_SIZE - 3; row < BOARD_SIZE; row++) {\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      if (isDarkCell(row, col)) board[getIndexByRowCol(row, col)] = \"light\";\n    }\n  }\n  return board;\n}\n\n/** вычисление допустимых ходов для выделенной шашки */\nfunction canMove(board, selected, player) {\n  if (selected == null || board[selected] !== player) return new Set();\n  const [row, col] = getRowColByIndex(selected);\n  const rowStep = player === \"dark\" ? +1 : -1;\n  const moves = [];\n  for (const colStep of [-1, +1]) {\n    const nextRow = row + rowStep;\n    const nextCol = col + colStep;\n\n    // обычный ход\n    if (nextRow >= 0 && nextRow < BOARD_SIZE && nextCol >= 0 && nextCol < BOARD_SIZE) {\n      const targetIndex = getIndexByRowCol(nextRow, nextCol);\n      if (board[targetIndex] == null) moves.push(targetIndex);\n    }\n\n    // прыжок через соперника\n    const jumpRow = row + rowStep * 2;\n    const jumpCol = col + colStep * 2;\n    if (jumpRow >= 0 && jumpRow < BOARD_SIZE && jumpCol >= 0 && jumpCol < BOARD_SIZE) {\n      const midIndex = getIndexByRowCol(row + rowStep, col + colStep);\n      const jumpIndex = getIndexByRowCol(jumpRow, jumpCol);\n      if (board[midIndex] && board[midIndex] !== player && board[jumpIndex] == null) {\n        moves.push(jumpIndex);\n      }\n    }\n  }\n  return new Set(moves);\n}\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","BOARD_SIZE","getIndexByRowCol","row","col","getRowColByIndex","i","Math","floor","isDarkCell","Square","value","onSquareClick","dark","selected","hint","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","squares","validMoves","onSelect","onMove","Array","map","_","index","has","_c2","Game","_s","history","setHistory","initBoard","setSelected","currentMove","length","darkIsNext","player","canMove","handleSelect","handleMove","next","slice","row1","col1","row2","col2","abs","midRow","midCol","nextHistory","_c3","board","fill","Set","rowStep","moves","colStep","nextRow","nextCol","targetIndex","push","jumpRow","jumpCol","midIndex","jumpIndex","$RefreshReg$"],"sources":["/Users/vlad/Desktop/3f1c5ee3-ddb9-4b74-9cd2-76b781c996ab/src/App.js"],"sourcesContent":["import { useState } from \"react\";\n\nconst BOARD_SIZE = 8; // размер доски 8x8\n\n// вспомогательные функции\n/** индекс в массиве по координатам */\nconst getIndexByRowCol = (row, col) => row * BOARD_SIZE + col;\n\n/** координаты по индексу в массиве */\nconst getRowColByIndex = (i) => [Math.floor(i / BOARD_SIZE), i % BOARD_SIZE];\n\n/** черная клетка = могут стоять шашки, на белой нельзя */\nconst isDarkCell = (row, col) => (row + col) % 2 === 1;\n\n// компоненты\n\nfunction Square({ value, onSquareClick, dark, selected, hint }) {\n  let className = \"square\";\n  if (dark) className += \" square--dark\";\n  if (selected) className += \" square--selected\";\n  if (hint) className += \" square--hint\";\n\n  return (\n    <button className={className} onClick={onSquareClick}>\n      {value === \"dark\" ? \"●\" : value === \"light\" ? \"○\" : \"\"}\n    </button>\n  );\n}\n\n// вся доска\nfunction Board({ squares, selected, validMoves, onSelect, onMove }) {\n  return (\n    <>\n      {[...Array(BOARD_SIZE)].map((_, row) => (\n        <div className=\"board-row\" key={row}>\n          {[...Array(BOARD_SIZE)].map((_, col) => {\n            const index = getIndexByRowCol(row, col); // индекс клетки в массиве\n            return (\n              <Square\n                key={index}\n                value={squares[index]}\n                dark={isDarkCell(row, col)}\n                selected={index === selected}\n                hint={validMoves.has(index)}\n                onSquareClick={() =>\n                  squares[index] ? onSelect(index) : onMove(index)\n                }\n              />\n            );\n          })}\n        </div>\n      ))}\n    </>\n  );\n}\n\nexport default function Game() {\n  const [history, setHistory] = useState([initBoard()]);\n  const [selected, setSelected] = useState(null);\n\n  const currentMove = history.length - 1;\n  const squares = history[currentMove];\n  const darkIsNext = currentMove % 2 === 0;\n  const player = darkIsNext ? \"dark\" : \"light\";\n\n  const validMoves = canMove(squares, selected, player);\n\n  // клик по своей шашке - выделяем или снимаем выделение\n  function handleSelect(i) {\n    if (squares[i] === player) {\n      setSelected(i);\n    } else {\n      setSelected(null);\n    }\n  }\n\n  // клик по пустой клетке - если ход возможен, то делаем его\n  function handleMove(i) {\n    if (selected != null && validMoves.has(i)) {\n      const next = squares.slice();\n      const [row1, col1] = getRowColByIndex(selected);\n      const [row2, col2] = getRowColByIndex(i);\n\n      // если прыжок на 2 клетки → убираем шашку соперника\n      if (Math.abs(row2 - row1) === 2 && Math.abs(col2 - col1) === 2) {\n        const midRow = (row1 + row2) / 2;\n        const midCol = (col1 + col2) / 2;\n        next[getIndexByRowCol(midRow, midCol)] = null;\n      }\n\n      next[i] = squares[selected];\n      next[selected] = null;\n      const nextHistory = [...history.slice(0, currentMove + 1), next];\n      setHistory(nextHistory);\n      setSelected(null);\n    }\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <div className=\"status\">Turn: {player}</div>\n        <Board\n          squares={squares}\n          selected={selected}\n          validMoves={validMoves}\n          onSelect={handleSelect}\n          onMove={handleMove}\n        />\n      </div>\n    </div>\n  );\n}\n\n// инициализация доски, расстановка шашек\nfunction initBoard() {\n  const board = Array(BOARD_SIZE * BOARD_SIZE).fill(null);\n  // расставляем темные шашки\n  for (let row = 0; row < 3; row++) {\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      if (isDarkCell(row, col)) board[getIndexByRowCol(row, col)] = \"dark\";\n    }\n  }\n  // расставляем светлые шашки\n  for (let row = BOARD_SIZE - 3; row < BOARD_SIZE; row++) {\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      if (isDarkCell(row, col)) board[getIndexByRowCol(row, col)] = \"light\";\n    }\n  }\n  return board;\n}\n\n/** вычисление допустимых ходов для выделенной шашки */\nfunction canMove(board, selected, player) {\n  if (selected == null || board[selected] !== player) return new Set();\n\n  const [row, col] = getRowColByIndex(selected);\n  const rowStep = player === \"dark\" ? +1 : -1;\n  const moves = [];\n\n  for (const colStep of [-1, +1]) {\n    const nextRow = row + rowStep;\n    const nextCol = col + colStep;\n\n    // обычный ход\n    if (\n      nextRow >= 0 &&\n      nextRow < BOARD_SIZE &&\n      nextCol >= 0 &&\n      nextCol < BOARD_SIZE\n    ) {\n      const targetIndex = getIndexByRowCol(nextRow, nextCol);\n      if (board[targetIndex] == null) moves.push(targetIndex);\n    }\n\n    // прыжок через соперника\n    const jumpRow = row + rowStep * 2;\n    const jumpCol = col + colStep * 2;\n    if (\n      jumpRow >= 0 &&\n      jumpRow < BOARD_SIZE &&\n      jumpCol >= 0 &&\n      jumpCol < BOARD_SIZE\n    ) {\n      const midIndex = getIndexByRowCol(row + rowStep, col + colStep);\n      const jumpIndex = getIndexByRowCol(jumpRow, jumpCol);\n\n      if (\n        board[midIndex] &&\n        board[midIndex] !== player &&\n        board[jumpIndex] == null\n      ) {\n        moves.push(jumpIndex);\n      }\n    }\n  }\n\n  return new Set(moves);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}